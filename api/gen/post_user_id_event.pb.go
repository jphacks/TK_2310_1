// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: post_user_id_event.proto

package gen

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PostUserIdEventRequest struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Latitude             float64  `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	ParticipantCount     int64    `protobuf:"varint,6,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
	UnitPrice            float64  `protobuf:"fixed64,7,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	WillStartAt          string   `protobuf:"bytes,8,opt,name=will_start_at,json=willStartAt,proto3" json:"will_start_at,omitempty"`
	WillCompleteAt       string   `protobuf:"bytes,9,opt,name=will_complete_at,json=willCompleteAt,proto3" json:"will_complete_at,omitempty"`
	ApplicationDeadline  string   `protobuf:"bytes,10,opt,name=application_deadline,json=applicationDeadline,proto3" json:"application_deadline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostUserIdEventRequest) Reset()         { *m = PostUserIdEventRequest{} }
func (m *PostUserIdEventRequest) String() string { return proto.CompactTextString(m) }
func (*PostUserIdEventRequest) ProtoMessage()    {}
func (*PostUserIdEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93af6dc472b71150, []int{0}
}
func (m *PostUserIdEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostUserIdEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostUserIdEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostUserIdEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostUserIdEventRequest.Merge(m, src)
}
func (m *PostUserIdEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostUserIdEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostUserIdEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostUserIdEventRequest proto.InternalMessageInfo

func (m *PostUserIdEventRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PostUserIdEventRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PostUserIdEventRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PostUserIdEventRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *PostUserIdEventRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *PostUserIdEventRequest) GetParticipantCount() int64 {
	if m != nil {
		return m.ParticipantCount
	}
	return 0
}

func (m *PostUserIdEventRequest) GetUnitPrice() float64 {
	if m != nil {
		return m.UnitPrice
	}
	return 0
}

func (m *PostUserIdEventRequest) GetWillStartAt() string {
	if m != nil {
		return m.WillStartAt
	}
	return ""
}

func (m *PostUserIdEventRequest) GetWillCompleteAt() string {
	if m != nil {
		return m.WillCompleteAt
	}
	return ""
}

func (m *PostUserIdEventRequest) GetApplicationDeadline() string {
	if m != nil {
		return m.ApplicationDeadline
	}
	return ""
}

func init() {
	proto.RegisterType((*PostUserIdEventRequest)(nil), "api.PostUserIdEventRequest")
}

func init() { proto.RegisterFile("post_user_id_event.proto", fileDescriptor_93af6dc472b71150) }

var fileDescriptor_93af6dc472b71150 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4d, 0x6e, 0x13, 0x31,
	0x14, 0x80, 0x71, 0x26, 0xbf, 0x46, 0xa0, 0x60, 0x50, 0xb0, 0x22, 0x32, 0x0a, 0xac, 0x82, 0x22,
	0x11, 0x21, 0x76, 0xec, 0x92, 0xc0, 0x82, 0x5d, 0x34, 0x88, 0x0d, 0x1b, 0xcb, 0x8c, 0x9f, 0x22,
	0x4b, 0xc6, 0x36, 0xf6, 0x9b, 0x70, 0x95, 0xde, 0xa0, 0x57, 0xe9, 0xb2, 0x47, 0xa8, 0xd2, 0x5b,
	0x74, 0x55, 0x39, 0x93, 0xb4, 0x99, 0xee, 0xec, 0xef, 0xfb, 0x9e, 0x25, 0xdb, 0x94, 0x7b, 0x17,
	0x51, 0x54, 0x11, 0x82, 0xd0, 0x4a, 0xc0, 0x0e, 0x2c, 0x7e, 0xf2, 0xc1, 0xa1, 0x63, 0x99, 0xf4,
	0x7a, 0xfc, 0x76, 0x27, 0x8d, 0x56, 0x12, 0x61, 0x71, 0x5a, 0xd4, 0xf6, 0xc3, 0x65, 0x46, 0x47,
	0x1b, 0x17, 0xf1, 0x57, 0x84, 0xf0, 0x43, 0x7d, 0x4f, 0x73, 0x05, 0xfc, 0xab, 0x20, 0x22, 0x9b,
	0xd0, 0x0e, 0x6a, 0x34, 0xc0, 0xc9, 0x94, 0xcc, 0x06, 0xab, 0xde, 0xdd, 0xaa, 0x1d, 0x5a, 0x43,
	0x52, 0xd4, 0x94, 0x7d, 0xa4, 0xcf, 0x15, 0xc4, 0x32, 0x68, 0x8f, 0xda, 0x59, 0xde, 0x6a, 0x46,
	0xe7, 0x8e, 0xbd, 0xa7, 0x3d, 0xa9, 0x54, 0x80, 0x18, 0x79, 0xd6, 0xcc, 0x4e, 0x9c, 0x8d, 0x69,
	0xdf, 0x48, 0xd4, 0x58, 0x29, 0xe0, 0xed, 0x29, 0x99, 0x91, 0xe2, 0x61, 0xcf, 0xde, 0xd1, 0x81,
	0x71, 0x76, 0x5b, 0xcb, 0xce, 0x41, 0x3e, 0x02, 0x36, 0xa7, 0xaf, 0xbc, 0x0c, 0xa8, 0x4b, 0xed,
	0xa5, 0x45, 0x51, 0xba, 0xca, 0x22, 0xef, 0x4e, 0xc9, 0x2c, 0x2b, 0x86, 0x67, 0x62, 0x9d, 0x38,
	0x9b, 0x50, 0x5a, 0x59, 0x8d, 0xc2, 0x07, 0x5d, 0x02, 0xef, 0xd5, 0x67, 0x25, 0xb2, 0x49, 0x80,
	0xcd, 0xe9, 0x8b, 0xff, 0xda, 0x18, 0x11, 0x51, 0x06, 0x14, 0x12, 0x79, 0xff, 0xc9, 0xad, 0x92,
	0xfd, 0x99, 0xe4, 0x12, 0xd9, 0x67, 0x3a, 0x3c, 0xc4, 0xa5, 0xfb, 0xeb, 0x0d, 0x20, 0xa4, 0x7e,
	0xd0, 0xec, 0x5f, 0xa6, 0x60, 0x7d, 0xf4, 0x4b, 0x64, 0x5f, 0xe9, 0x1b, 0xe9, 0xbd, 0xd1, 0xa5,
	0x4c, 0xef, 0x22, 0x14, 0x48, 0x65, 0xb4, 0x05, 0x4e, 0x9b, 0x63, 0xaf, 0xcf, 0xa2, 0x6f, 0xc7,
	0x66, 0x35, 0xba, 0xda, 0xe7, 0xe4, 0x7a, 0x9f, 0x93, 0x9b, 0x7d, 0x4e, 0x2e, 0x6e, 0xf3, 0x67,
	0xbf, 0xdb, 0x8b, 0x2d, 0xd8, 0x3f, 0xdd, 0xc3, 0x47, 0x7e, 0xb9, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x05, 0x99, 0x58, 0x77, 0x02, 0x02, 0x00, 0x00,
}

func (m *PostUserIdEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostUserIdEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostUserIdEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApplicationDeadline) > 0 {
		i -= len(m.ApplicationDeadline)
		copy(dAtA[i:], m.ApplicationDeadline)
		i = encodeVarintPostUserIdEvent(dAtA, i, uint64(len(m.ApplicationDeadline)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.WillCompleteAt) > 0 {
		i -= len(m.WillCompleteAt)
		copy(dAtA[i:], m.WillCompleteAt)
		i = encodeVarintPostUserIdEvent(dAtA, i, uint64(len(m.WillCompleteAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.WillStartAt) > 0 {
		i -= len(m.WillStartAt)
		copy(dAtA[i:], m.WillStartAt)
		i = encodeVarintPostUserIdEvent(dAtA, i, uint64(len(m.WillStartAt)))
		i--
		dAtA[i] = 0x42
	}
	if m.UnitPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UnitPrice))))
		i--
		dAtA[i] = 0x39
	}
	if m.ParticipantCount != 0 {
		i = encodeVarintPostUserIdEvent(dAtA, i, uint64(m.ParticipantCount))
		i--
		dAtA[i] = 0x30
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x29
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPostUserIdEvent(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPostUserIdEvent(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPostUserIdEvent(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPostUserIdEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovPostUserIdEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PostUserIdEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPostUserIdEvent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPostUserIdEvent(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPostUserIdEvent(uint64(l))
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.ParticipantCount != 0 {
		n += 1 + sovPostUserIdEvent(uint64(m.ParticipantCount))
	}
	if m.UnitPrice != 0 {
		n += 9
	}
	l = len(m.WillStartAt)
	if l > 0 {
		n += 1 + l + sovPostUserIdEvent(uint64(l))
	}
	l = len(m.WillCompleteAt)
	if l > 0 {
		n += 1 + l + sovPostUserIdEvent(uint64(l))
	}
	l = len(m.ApplicationDeadline)
	if l > 0 {
		n += 1 + l + sovPostUserIdEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPostUserIdEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPostUserIdEvent(x uint64) (n int) {
	return sovPostUserIdEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PostUserIdEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostUserIdEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostUserIdEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostUserIdEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostUserIdEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostUserIdEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostUserIdEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantCount", wireType)
			}
			m.ParticipantCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostUserIdEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UnitPrice = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WillStartAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostUserIdEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WillStartAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WillCompleteAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostUserIdEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WillCompleteAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationDeadline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostUserIdEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationDeadline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostUserIdEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPostUserIdEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPostUserIdEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPostUserIdEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPostUserIdEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPostUserIdEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPostUserIdEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPostUserIdEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPostUserIdEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPostUserIdEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPostUserIdEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPostUserIdEvent = fmt.Errorf("proto: unexpected end of group")
)
